#!/bin/bash

# These values are for the root CA required by our UI tests. To generate them:
# 1. Open any simulator and reset it
# 2. Drag the rootCA.pem onto the simulator
# 3. Discover the name of the simulator with `xcrun simctl list | grep Booted`
# 4. Connect to the keychain with `sqlite3 /Users/Max.Chuquimia/Library/Developer/CoreSimulator/Devices/SIMULATOR_ID/data/Library/Keychains/TrustStore.sqlite3`
# 5. Read the values of rootCA from the database as hex and paste them below, e.g. `SELECT hex(subj) FROM tsettings;`

SHA1="436B01BAAB1229529C0E43B7C4217A120E51A1A3"
SUBJ="311E301C060355040A13154D4B4345525420444556454C4F504D454E54204341313C303A060355040B0C33416C657373616E64726F2E426F726F6E4049542D43303259443253444A47354A2028416C657373616E64726F20426F726F6E293143304106035504030C3A6D6B6365727420416C657373616E64726F2E426F726F6E4049542D43303259443253444A47354A2028416C657373616E64726F20426F726F6E29"
TSET="3C3F786D6C2076657273696F6E3D22312E302220656E636F64696E673D225554462D38223F3E0A3C21444F435459504520706C697374205055424C494320222D2F2F4170706C652F2F44544420504C49535420312E302F2F454E222022687474703A2F2F7777772E6170706C652E636F6D2F445444732F50726F70657274794C6973742D312E302E647464223E0A3C706C6973742076657273696F6E3D22312E30223E0A3C61727261792F3E0A3C2F706C6973743E0A"


echo "Installing custom certificate into simulators..."

install() {
if [ -f "$SQLITEDBPATH" ]; then
cp -n "$SQLITEDBPATH" "$SQLITEDBPATH.charlesbackup"
sqlite3 "$SQLITEDBPATH" <<EOF
INSERT INTO "tsettings" VALUES(X'$SHA1',X'$SUBJ',X'$TSET',X'$DATA');
EOF
fi
}

for SQLITEDBPATH in ~/Library/Application\ Support/iPhone\ Simulator/3.*/Library/Keychains/TrustStore.sqlite3
do install
done

for SQLITEDBPATH in ~/Library/Application\ Support/iPhone\ Simulator/4.*/Library/Keychains/TrustStore.sqlite3
do install
done

for SQLITEDBPATH in ~/Library/Developer/CoreSimulator/Devices/*/data/Library/Keychains/TrustStore.sqlite3
do install
done

SQLITEDBPATH=~/Library/Application\ Support/iPhone\ Simulator/User/Library/Keychains/TrustStore.sqlite3
install

echo "Custom certificate has been installed"

# There should be a way to generate the db info from a PEM file - I'm just very unsure about how to extract the subject into the correct format
#PEM_PATH=$1
#SHA1="$(shasum "$PEM_PATH"  | sed 's/^\([a-z0-9]*\) .*$/\1/g' | tr a-z A-Z)"
#SUBJ="???" # openssl asn1parse -in /tmp/data.peopenssl x509 -inform DER -in /private/tmp/data.pem -outform der | openssl asn1parse -inform der -i -strparse 119 -nooutm  -i -strparse 119
#TSET="3C3F786D6C2076657273696F6E3D22312E302220656E636F64696E673D225554462D38223F3E0A3C21444F435459504520706C697374205055424C494320222D2F2F4170706C652F2F44544420504C49535420312E302F2F454E222022687474703A2F2F7777772E6170706C652E636F6D2F445444732F50726F70657274794C6973742D312E302E647464223E0A3C706C6973742076657273696F6E3D22312E30223E0A3C61727261792F3E0A3C2F706C6973743E0A"
#DATA="$(cat "$PEM_PATH" | xxd -p -C -c 999999 | tr a-z A-Z)"

